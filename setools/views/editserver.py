"""Menu for adding and editing servers."""

import contextlib
from io import StringIO

import discord
from redbot.core import commands
from redbot.core.utils.chat_formatting import box

from ..abc import MixinMeta
from ..common.models import Server
from . import BaseMenu, MenuButton
from .dynamicmodal import DynamicModal


class EditServerMenu(BaseMenu):
    def __init__(
        self,
        cog: MixinMeta,
        ctx: commands.Context,
        server_name: str = None,
    ):
        super().__init__(cog, ctx)
        self.server_name = server_name
        self.server = self.conf.get_server(server_name)
        self.add_item(
            MenuButton(
                callback_func=self.configure,
                style=discord.ButtonStyle.secondary,
                label="Configure",
            )
        )
        self.add_item(
            MenuButton(
                callback_func=self.save,
                style=discord.ButtonStyle.success,
                label="Save",
            )
        )
        self.add_item(
            MenuButton(
                callback_func=self.close,
                style=discord.ButtonStyle.danger,
                label="Close",
            )
        )

    @staticmethod
    def get_embed(server: Server) -> discord.Embed:
        channel = f"<#{server.chat_channel}>" if server.chat_channel else "Not set"
        joinlog = f"<#{server.join_log}>" if server.join_log else "Not set"
        valid = f"{'✅' if not server.invalid else '❌'}"
        token = "*" * len(server.token) if server.token else "Not Set"
        txt = (
            f"- Name: {server.name or 'Not Set'} {valid}\n"
            f"- Address: {server.address or 'Not set'}\n"
            f"- Chat Channel: {channel}\n"
            f"- Join Log: {joinlog}\n"
            f"- Token: {token}\n"
        )
        embed = discord.Embed(
            title="Server Configuration",
            description=txt,
            color=discord.Color.blurple(),
        )
        return embed

    async def start_menu(self):
        if self.server is None:
            # We are creating a new server
            self.server = Server(name=self.server_name)
        embed = self.get_embed(self.server)
        self.message = await self.channel.send(embed=embed, view=self)

    async def refresh(self):
        embed = self.get_embed(self.server)
        await self.message.edit(embed=embed, view=self)

    async def configure(self, interaction: discord.Interaction, button: discord.ui.Button):
        fields = {
            "address": {
                "label": "Server Address",
                "default": self.server.address,
                "placeholder": "http://IP:PORT",
            },
            "token": {
                "label": "Server Token",
                "default": self.server.token,
                "placeholder": "Generated by your SE server client",
            },
            "name": {
                "label": "Server Name",
                "default": self.server.name,
                "placeholder": "Enter a unique name for your server",
            },
            "chat_channel": {
                "label": "Chat Channel",
                "default": self.server.chat_channel,
                "required": False,
            },
            "join_log": {
                "label": "Join Log",
                "default": self.server.join_log,
                "required": False,
            },
        }
        modal = DynamicModal(
            title="Configure Server",
            field_data=fields,
        )
        await interaction.response.send_modal(modal)
        await modal.wait()
        if modal.inputs is None:
            return
        self.server.address = modal.inputs["address"]
        self.server.token = modal.inputs["token"]
        self.server.name = modal.inputs["name"]
        if chatchannel := modal.inputs["chat_channel"]:
            if not chatchannel.isdigit():
                await interaction.followup.send(
                    box("- Chat Channel ID must be a number!", lang="diff"),
                    ephemeral=True,
                )
            elif not self.guild.get_channel(int(chatchannel)):
                await interaction.followup.send(
                    box("- Chat Channel must be a valid channel ID!", lang="diff"),
                    ephemeral=True,
                )
            else:
                self.server.chat_channel = int(modal.inputs["chat_channel"])
        if joinlog := modal.inputs["join_log"]:
            if not joinlog.isdigit():
                await interaction.followup.send(
                    box("- Join Log ID must be a number!", lang="diff"),
                    ephemeral=True,
                )
            elif not self.guild.get_channel(int(joinlog)):
                await interaction.followup.send(
                    box("- Join Log must be a valid channel ID!", lang="diff"),
                    ephemeral=True,
                )
            else:
                self.server.join_log = int(modal.inputs["join_log"])
        await self.refresh()

    async def save(self, interaction: discord.Interaction, button: discord.ui.Button):
        errors = StringIO()
        if not self.server.address:
            errors.write("- Server address is required!\n")
        if not self.server.token:
            errors.write("- Server token is required!\n")
        if not self.server.name:
            errors.write("- Server name is required!\n")
        if errors.getvalue():
            await interaction.response.send_message(
                f"### Cant save yet!:\n{errors.getvalue()}",
                ephemeral=True,
            )
            return
        await interaction.response.send_message(
            "### Server saved!",
            ephemeral=True,
        )
        if self.server in self.conf.servers:
            self.conf.servers.remove(self.server)
        self.conf.servers.append(self.server)
        await self.cog.save()

    async def close(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        if self.message is not None:
            with contextlib.suppress(discord.HTTPException, discord.NotFound):
                await self.message.delete()
