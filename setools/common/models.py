import discord
from rapidfuzz import fuzz

from . import Base


class Server(Base):
    address: str | None = None  # http://IP:PORT
    token: str | None = None  # Generated by the SE server client
    name: str | None = None
    chat_channel: int = 0
    join_log: int = 0

    @property
    def id(self) -> int:
        joined = "-".join(str(i) for i in self.model_dump(exclude={"chat_channel", "join_log"}).values())
        return joined.__hash__()

    @property
    def invalid(self) -> bool:
        return not all([self.address, self.token, self.name])

    def __eq__(self, __value: object) -> bool:
        return isinstance(__value, Server) and self.id == __value.id

    def __hash__(self) -> int:
        return self.id


class GuildSettings(Base):
    servers: list[Server] = []
    status_channel: int = 0
    status_message: int = 0

    def get_server(self, name: str) -> Server | None:
        for server in self.servers:
            if server.name.lower() == name.lower():
                return server

    def get_server_similar(self, name: str) -> Server | None:
        if not self.servers:
            return None
        scores = [(fuzz.ratio(i.name.lower(), name.lower()), i) for i in self.servers]
        scores.sort(key=lambda x: x[0], reverse=True)
        if scores[0][0] > 50:
            return scores[0][1]
        return None


class DB(Base):
    configs: dict[int, GuildSettings] = {}

    def get_conf(self, guild: discord.Guild | int) -> GuildSettings:
        gid = guild if isinstance(guild, int) else guild.id
        return self.configs.setdefault(gid, GuildSettings())
